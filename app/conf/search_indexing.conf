# Field level options
#
#	STORE 			 				(forces value to be stored in index, if possible; this can speed display of the content in a search but may slow down indexing and increases index size)
#	DONT_TOKENIZE	 				(indexes value as-is without tokenization)
#	DONT_INCLUDE_IN_SEARCH_FORM 	(causes field to not be includable in user-defined search forms)
#	BOOST							(numeric "boost" value to index field with; higher values will cause search hits on the boosted field to count for more when sorting by relevance)
#
# Special fields (always start with underscore character):
#	_metadata		(indexes attached ca_attribute_values; you can only specify this for the subject table of an index)
#
#	_count			(embeds the number of related rows for a given table in the index; you can only specify this for non-subject tables; the field is named 
#					 <table_name>_count - for example: object_representations_count for table 'object_representations'; we need this so we can find rows that have, or 
#					 don't have, related rows in a given table. Specifically we need this to implement "show only objects with media" functionality since we can't just
#					 do an INNER JOIN in Lucene as we did in the old SQL-based search engine)
#	_hier_ancestors	(adds a number of specified fields of the ancestors of related rows to the index; oviously this will only work for hierarchical entites like
#					place_names and voc_terms; you can for example specify something like this: _hier_ancestors = { name }; this will force the indexer to look for ancestors
#					of the current subject and add their "name" fields to a virtual field named _hier_ancestors;
#					this - for instance - enables you to find objects related to the place "Madrid" while searching for "Spain")
#					 
# Access point are "virtual fields" for use in searches. They can be employed in three ways:
#	(1) as simple aliases for individual fields. For example, if you wanted to enabled searches on object synonym using objsyn like so: 
#				objsyn:Volkswagen
#		then you'd simply define 'objsyn' to be an access point to objects.synonym
#
#	(2) as aliases for bundles of fields. If an access point is defined to include several fields, then a search on the access point will search all of the included fields at the same time.
#
# Note that all fields included in an access point must be included in the search index - they must appear in the "fields" list in other words. All indexed fields automatically
# have access points created in the format tablename.fieldname (ex. objects.title); indexed metadata also have access points in the format tablename.md_<element_id> (ex. objects.md_5)
#
# When creating an access point you define an access point configuration associative list, then create a key for each access point.

# ------------------------------------------------------------------------------------------------------------
ca_objects = {
	# ------------------------------------
	_access_points = {
		label = {
			fields = [ca_object_labels.name],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		term_id = {
			fields = [ca_list_item_labels.item_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		entity_id = {
			fields = [ca_entity_labels.entity_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		place_id = {
			fields = [ca_place_labels.place_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		children = {
			fields = [ca_objects.parent_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		type_id = {
			fields = [ca_objects.type_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		source_id = {
			fields = [ca_objects.source_id],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		access = {
			fields = [ca_objects.access],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		idno = {
			fields = [ca_objects.idno],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		tags = {
			fields = [ca_item_tags.tag]
			name = _(User tags)
		},
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR,
			name = _(Set code)
		},
		place = {
			fields = [ca_place_labels.name],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		},
		term = {
			fields = [ca_list_item_labels.name_singular, ca_list_item_labels.name_plural],
			boolean = OR,
			name = _(Related term)
		},
		entity = {
			fields = [ca_entity_labels.displayname],
			options = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_objects = {
		fields = {
			_metadata = { },					# forces indexing of all attributes
			parent_id = {STORE, DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM },
			source_id = {},
			idno = { STORE, DONT_TOKENIZE, BOOST = 100 },	
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM },		# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_object_labels = {
		key = object_id,
		fields = {
			name = { BOOST = 100 },
			name_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_objects_x_entities, ca_entities],
			annotations = [ca_objects_x_object_representations, ca_object_representations, ca_representation_annotations, ca_representation_annotations_x_entities, ca_entities]
		},
		fields = {
			entity_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			displayname = {},
			forename = {},
			surname = {},
			middlename = {}
		}
	},
	# ------------------------------------
	ca_place_labels = {
		tables = {
			places = [ca_objects_x_places, ca_places],
			annotations = [ca_objects_x_object_representations, ca_object_representations, ca_representation_annotations, ca_representation_annotations_x_places, ca_places]
		},
		fields = {
			place_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_places = {
		tables = {
			places = [ca_objects_x_places],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_occurrence_labels = {
		tables = {
			occurrences = [ca_objects_x_occurrences, ca_occurrences],
			annotations = [ca_objects_x_object_representations, ca_object_representations, ca_representation_annotations, ca_representation_annotations_x_occurrences, ca_occurrences]
		},
		fields = {
			occurrence_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_objects_x_vocabulary_terms, ca_list_items],
			annotations = [ca_objects_x_object_representations, ca_object_representations, ca_representation_annotations, ca_representation_annotations_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM }, 
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_list_items = {
		tables = {
			vocabulary = [ca_objects_x_vocabulary_terms],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_representation_annotation_labels = {
		tables = {
			vocabulary = [ca_objects_x_object_representations, ca_object_representations, ca_representation_annotations]
		},
		fields = {
			name = {},
			name_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_item_tags = {
		tables = {
			tags = [ca_items_x_tags],
		},
		keys = {		# manually override joins with explicit setting
			tags = {
				ca_items_x_tags = {
					ca_objects = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = object_id
					}
				}
			}
		},
		fields = {
			tag = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_objects = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = object_id
					}
				}
			}
		},
		fields = {
			set_code = {DONT_TOKENIZE },
			set_id = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_storage_locations = {
		tables = {
			places = [ca_objects_x_storage_locations],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_storage_location_labels = {
		tables = {
			places = [ca_objects_x_storage_locations, ca_storage_locations]
		},
		fields = {
			location_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_object_representations = {
		tables = {
			reps = [ca_objects_x_object_representations]
		},
		fields = {
			media_content = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_representation_annotations = {
	# ------------------------------------
	_access_points = {
		access = {
			fields = [ca_representation_annotations.access]
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_representation_annotations_x_entities, ca_entities]
		},
		fields = {
			displayname = {}
		}
	},
	# ------------------------------------
	ca_place_labels = {
		tables = {
			places = [ca_representation_annotations_x_places, ca_places]
		},
		fields = {
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabularies = [ca_representation_annotations_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM }, 
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_representation_annotation_labels = {
		key = annotation_id,
		fields = {
			name = {},
			name_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
}

# ------------------------------------------------------------------------------------------------------------
ca_object_lots = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_object_lots = {
		fields = {
			idno_stub = { STORE, DONT_TOKENIZE, BOOST = 100 },
			idno_stub_sort = { DONT_TOKENIZE },	# idno_sort needs to be indexed so it can be sorted on
			status = { },
			_metadata = { }
		}
	},
	# ------------------------------------
	ca_object_lot_labels = {
		key = lot_id,
		fields = {
			name = { BOOST = 100 },
			name_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_object_lots_x_entities, ca_entities]
		},
		fields = {
			displayname = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_object_lots_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_objects = {
		key = lot_id,
		fields = {
			idno = {},
			idno_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_storage_location_labels = {
		tables = {
			places = [ca_object_lots_x_storage_locations, ca_storage_locations]
		},
		fields = {
			location_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_object_lots = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = lot_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_entities = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_entities = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		key = entity_id,
		fields = {
			forename = { BOOST = 100 },
			other_forenames = {},
			surname = { BOOST = 100 },
			middlename = {},
			displayname = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_place_labels = {
		tables = {
			places = [ca_entities_x_places, ca_places],
		},
		fields = {
			place_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_occurrence_labels = {
		tables = {
			occurrences = [ca_entities_x_occurrences, ca_occurrences],
		},
		fields = {
			occurrence_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_collection_labels = {
		tables = {
			collections = [ca_entities_x_collections, ca_collections],
		},
		fields = {
			collection_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_entities_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_entities = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = entity_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_places = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_places = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE },
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_place_labels = {
		key = place_id,
		fields = {
			name = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_entities_x_places, ca_entities],
		},
		fields = {
			entity_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			displayname = {}
		}
	},
	# ------------------------------------
	ca_occurrence_labels = {
		tables = {
			places = [ca_places_x_occurrences, ca_occurrences],
		},
		fields = {
			occurrence_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_collection_labels = {
		tables = {
			collections = [ca_places_x_collections, ca_collections],
		},
		fields = {
			collection_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_places_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_places = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = place_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_occurrences = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_occurrences = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM },	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_occurrence_labels = {
		key = occurrence_id,
		fields = {
			name = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_entities_x_occurrences, ca_entities]
		},
		fields = {
			displayname = {}
		}
	},
	# ------------------------------------
	ca_place_labels = {
		tables = {
			places = [ca_places_x_occurrences, ca_places]
		},
		fields = {
			name = {}
		}
	},
	# ------------------------------------
	ca_places = {
		tables = {
			places = [ca_places_x_occurrences],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_collection_labels = {
		tables = {
			collections = [ca_occurrences_x_collections, ca_collections],
		},
		fields = {
			collection_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_occurrences_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = {},
			name_plural = {}
		}
	},
	
	# ------------------------------------
	ca_list_items = {
		tables = {
			vocabulary = [ca_occurrences_x_vocabulary_terms],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_occurrences = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = occurrence_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------

ca_collections = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_collections = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_collection_labels = {
		key = collection_id,
		fields = {
			name = { BOOST = 100 },
			name_sort = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_entities_x_collections, ca_entities]
		},
		fields = {
			displayname = {}
		}
	},
	# ------------------------------------
	ca_place_labels = {
		tables = {
			places = [ca_places_x_collections, ca_places]
		},
		fields = {
			name = {}
		}
	},
	# ------------------------------------
	ca_occurrence_labels = {
		tables = {
			occurrences = [ca_occurrences_x_collections, ca_occurrences]
		},
		fields = {
			name = {}
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		tables = {
			vocabulary = [ca_collections_x_vocabulary_terms, ca_list_items]
		},
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = {},
			name_plural = {}
		}
	},
	# ------------------------------------
	ca_list_items = {
		tables = {
			vocabulary = [ca_collections_x_vocabulary_terms],
		},
		fields = {
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_collections = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = collection_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	}
	# ------------------------------------
}
# ------------------------------------------------------------------------------------------------------------

ca_list_items = {
	# ------------------------------------
	_access_points = {
		voc = {
			fields = [ca_lists.use_as_vocabulary]
		},
		list_code = {
			fields = [ca_lists.list_code]
		},
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_lists = {
		key = list_id,
		fields = {
			use_as_vocabulary = { STORE, DONT_TOKENIZE },
			list_code = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_list_items = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_list_item_labels = {
		key = item_id,
		fields = {
			item_id = { DONT_INCLUDE_IN_SEARCH_FORM },
			name_singular = { BOOST = 100 },
			name_plural = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_list_items = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = item_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------

ca_item_comments = {
	# ------------------------------------
	_access_points = {
		comment = {
			fields = [ca_item_comments.comment]
		},
		email = {
			fields = [ca_item_comments.email]
		},
		name = {
			fields = [ca_item_comments.name]
		}
	},
	# ------------------------------------
	ca_item_comments = {
		fields = {
			comment = { },
			email = { },
			name = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------

ca_storage_locations = {
	# ------------------------------------
	_access_points = {
		name = {
			fields = [ca_storage_location_labels.name]
		},
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_storage_locations = {
		fields = {
			status = { },
			type_id = { },
			_metadata = { }
		}
	}
	# ------------------------------------
	ca_storage_location_labels = {
		key = location_id,
		fields = {
			name = {}
		}
	},
	# ------------------------------------
	ca_sets = {
		tables = {
			sets = [ca_set_items],
		},
		keys = {		# manually override joins with explicit setting
			sets = {
				ca_set_items = {
					ca_storage_locations = {
						left_key = row_id,
						left_table_num = table_num,
						right_key = location_id
					}
				}
			}
		},
		fields = {
			set_code = {},
			set_id = { DONT_INCLUDE_IN_SEARCH_FORM }
		}
	},
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------

ca_relationship_types = {
	# ------------------------------------
	_access_points = {
		name = {
			fields = [ca_relationship_type_labels.typename, ca_relationship_type_labels.typename_reverse]
		}
	},
	# ------------------------------------
	ca_relationship_types = {
		fields = {
			type_code = { }
		}
	}
	# ------------------------------------
	ca_relationship_type_labels = {
		key = type_id,
		fields = {
			typename = {},
			typename_reverse = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_loans = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		}
	},
	# ------------------------------------
	ca_loans = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_loan_labels = {
		key = loan_id,
		fields = {
			name = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_loans_x_entities, ca_entities, ca_entity_labels]
		},
		fields = {
			displayname = {},
			forename = {},
			surname = {}
		}
	},
	# ------------------------------------
	ca_objects = {
		tables = {
			objects = [ca_loans_x_objects, ca_objects]
		},
		fields = {
			idno = {}
		}
	},
	# ------------------------------------
	ca_object_labels = {
		tables = {
			objects = [ca_loans_x_objects, ca_objects, ca_object_labels]
		},
		fields = {
			name = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_movements = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		}
	},
	# ------------------------------------
	ca_movements = {
		fields = {
			idno = { STORE, DONT_TOKENIZE },
			idno_sort = { DONT_TOKENIZE, DONT_INCLUDE_IN_SEARCH_FORM }	# idno_sort needs to be indexed so it can be sorted on 
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE }
		}
	},
	# ------------------------------------
	ca_movement_labels = {
		key = movement_id,
		fields = {
			name = { BOOST = 100 }
		}
	},
	# ------------------------------------
	ca_entity_labels = {
		tables = {
			entities = [ca_movements_x_entities, ca_entities, ca_entity_labels]
		},
		fields = {
			displayname = {},
			forename = {},
			surname = {}
		}
	},
	# ------------------------------------
	ca_objects = {
		tables = {
			objects = [ca_movements_x_objects, ca_objects]
		},
		fields = {
			idno = {}
		}
	},
	# ------------------------------------
	ca_object_labels = {
		tables = {
			objects = [ca_movements_x_objects, ca_objects, ca_object_labels]
		},
		fields = {
			name = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_item_tags = {
	# ------------------------------------
	_access_points = {
		tag = {
			fields = [ca_item_tags.tag]
		}
	},
	# ------------------------------------
	ca_item_tags = {
		fields = {
			tag = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_users = {
	# ------------------------------------
	_access_points = {
		username = {
			fields = [ca_users.user_name]
		}
	},
	# ------------------------------------
	ca_users = {
		fields = {
			user_name = {},
			fname = {},
			lname = {},
			email = {}
		}
	}
	# ------------------------------------
}

# ------------------------------------------------------------------------------------------------------------
ca_user_groups = {
	# ------------------------------------
	_access_points = {
		name = {
			fields = [ca_user_groups.name]
		}
	},
	# ------------------------------------
	ca_user_groups = {
		fields = {
			name = {},
			code = {},
			description = {}
		}
	}
	# ------------------------------------
}
# ------------------------------------------------------------------------------------------------------------
ca_sets = {
	# ------------------------------------
	_access_points = {
		set = {
			fields = [ca_sets.set_id, ca_sets.set_code],
			boolean = OR
		},
		type_id = {
			fields = [ca_sets.type_id],
			boolean = OR
		},
	},
	# ------------------------------------
	ca_sets = {
		fields = {
			set_code = { STORE, DONT_TOKENIZE },
			type_id = { STORE, DONT_TOKENIZE },
			_metadata = { },
			access = { STORE, DONT_TOKENIZE },
			status = { STORE, DONT_TOKENIZE },
			_hier_ancestors = {_labels}
		}
	},
	# ------------------------------------
	ca_set_labels = {
		key = set_id,
		fields = {
			name = { BOOST = 100 }
		}
	}
}
# ------------------------------------------------------------------------------------------------------------