<?php
/** ---------------------------------------------------------------------
 * includes/plugins/IDNumbering/MultipartIDNumber.php : plugin to generate id numbers
 * ----------------------------------------------------------------------
 * CollectiveAccess
 * Open-source collections management software
 * ----------------------------------------------------------------------
 *
 * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)
 * Copyright 2007-2011 Whirl-i-Gig
 *
 * For more information visit http://www.CollectiveAccess.org
 *
 * This program is free software; you may redistribute it and/or modify it under
 * the terms of the provided license as published by Whirl-i-Gig
 *
 * CollectiveAccess is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * This source code is free and modifiable under the terms of 
 * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See
 * the "license.txt" file for details, or visit the CollectiveAccess web site at
 * http://www.CollectiveAccess.org
 *
 * @package CollectiveAccess
 * @subpackage IDNumbering
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3
 *
 * ----------------------------------------------------------------------
 */
 
  /**
  *
  */
  
	require_once(__CA_LIB_DIR__."/core/Configuration.php");
	require_once(__CA_LIB_DIR__."/core/Datamodel.php");
	require_once(__CA_LIB_DIR__."/core/Db.php");
	require_once(__CA_LIB_DIR__."/core/ApplicationVars.php");
	require_once(__CA_LIB_DIR__."/ca/IDNumbering/IDNumber.php");
	require_once(__CA_LIB_DIR__."/ca/IDNumbering/IIDNumbering.php");
	require_once(__CA_APP_DIR__."/helpers/navigationHelpers.php");
	
	class MultipartIDNumber extends IDNumber implements IIDNumbering {
		# -------------------------------------------------------
		private $opo_idnumber_config;
		private $opa_formats;
		
		private $opo_db;
		
		# -------------------------------------------------------
		public function __construct($ps_format=null, $ps_type='__default__', $ps_value=null, $po_db=null) {
			parent::__construct();
			$this->opo_idnumber_config = Configuration::load($this->opo_config->get('multipart_id_numbering_config'));
			$this->opa_formats = $this->opo_idnumber_config->getAssoc('formats');
			
			if ($ps_format) { $this->setFormat($ps_format); }
			if ($ps_type) { $this->setType($ps_type); }
			if ($ps_value) { $this->setValue($ps_value); }
			
			if ((!$po_db) || !is_object($po_db)) { 
				$this->opo_db = new Db();
			} else {
				$this->opo_db = $po_db;
			}
		}
		# -------------------------------------------------------
		# Formats
		# -------------------------------------------------------
		public function getFormats() {
			return array_keys($this->opa_formats);
		}
		# -------------------------------------------------------
		public function isValidFormat($ps_format) {
			return in_array($ps_format, $this->getFormats());
		}
		# -------------------------------------------------------
		public function getSeparator() {
			if (($vs_format = $this->getFormat()) && ($vs_type = $this->getType()) && isset($this->opa_formats[$vs_format][$vs_type]['separator'])) {
				return $this->opa_formats[$vs_format][$vs_type]['separator'] ? $this->opa_formats[$vs_format][$vs_type]['separator'] : '';
			}
			return '.';
		}
		# -------------------------------------------------------
		public function isSerialFormat($ps_format=null, $ps_type=null) {
			if ($ps_format) {
				if (!$this->isValidFormat($ps_format)) {
					return false;
				}
				$vs_format = $ps_format;
			} else {
				if(!($vs_format = $this->getFormat())) {
					return false;
				}
			}
			if ($ps_type) {
				if (!$this->isValidType($ps_type)) {
					return false;
				}
				$vs_type = $ps_type;
			} else {
				if(!($vs_type = $this->getType())) {
					return false;
				}
			}
			
			$va_elements = $this->opa_formats[$vs_format][$vs_type]['elements'];
			$va_last_element = array_pop($va_elements);
			if ($va_last_element['type'] == 'SERIAL') {
				return true;
			}
			return false;
		}
		# -------------------------------------------------------
		# Returns true if the current format is an extension of $ps_format
		# That is, the current format is the same as the $ps_form with an auto-generated
		# extra element such that the system can auto-generate unique numbers using a $ps_format
		# compatible number as the basis. This is mainly used to determine if the system configuration
		# is such that object numbers can be auto-generated based upon lot numbers.
		public function formatIsExtensionOf($ps_format, $ps_type='__default__') {
			if (!$this->isSerialFormat()) {
				return false;	// If this format doesn't end in a SERIAL element it can't be autogenerated.
			}
			
			if (!$this->isValidFormat($ps_format)) { 
				return false;	// specifed format does not exist
			}
			if (!$this->isValidType($ps_type)) { 
				return false;	// specifed type does not exist
			}
			
			$va_base_elements = $this->opa_formats[$ps_format][$ps_type]['elements'];
			$va_ext_elements = $this->getElements();
			
			if (sizeof($va_ext_elements) != (sizeof($va_base_elements) + 1)) {
				return false;	// extension should have exactly one more element than base
			}
			
			$vn_num_elements = sizeof($va_base_elements);
			for($vn_i=0; $vn_i < $vn_num_elements; $vn_i++) {
				$va_base_element = array_shift($va_base_elements);
				$va_ext_element = array_shift($va_ext_elements);
				
				if ($va_base_element['type'] != $va_ext_element['type']) { return false; }
				if ($va_base_element['width'] > $va_ext_element['width']) { return false; }
				
				switch($va_base_element['type']) {
					case 'LIST':
						if (!is_array($va_base_element['values']) || !is_array($va_ext_element['values'])) { return false; }
						if (sizeof($va_base_element['values']) != sizeof($va_ext_element['values'])) { return false; }
						for($vn_j=0; $vn_j < sizeof($va_base_element['values']); $vn_j++) {
							if ($va_base_element['values'][$vn_j] != $va_ext_element['values'][$vn_j]) { return false; }
						}
						break;
					case 'CONSTANT';
						if ($va_base_element['value'] != $va_ext_element['value']) { return false; }
						break;
					case 'NUMERIC':
						if ($va_base_element['minimum_length'] < $va_ext_element['minimum_length']) { return false; }
						if ($va_base_element['maximum_length'] > $va_ext_element['maximum_length']) { return false; }
						if ($va_base_element['minimum_value'] < $va_ext_element['minimum_value']) { return false; }
						if ($va_base_element['maximum_value'] > $va_ext_element['maximum_value']) { return false; }
						break;
					case 'ALPHANUMERIC':
						if ($va_base_element['minimum_length'] < $va_ext_element['minimum_length']) { return false; }
						if ($va_base_element['maximum_length'] > $va_ext_element['maximum_length']) { return false; }
						break;
					case 'FREE':
						if ($va_base_element['minimum_length'] < $va_ext_element['minimum_length']) { return false; }
						if ($va_base_element['maximum_length'] > $va_ext_element['maximum_length']) { return false; }
						break;
				}
			}
			
			return true;
			
		}
		# -------------------------------------------------------
		# Types
		# -------------------------------------------------------
		public function getTypes() {
			$va_formats = $this->getFormats();
			
			$va_types = array();
			foreach($va_formats as $vs_format) {
				if (is_array($this->opa_formats[$vs_format])) {
					foreach($this->opa_formats[$vs_format] as $vs_type => $va_info) {
						$va_types[$vs_type] = true;
					}
				}
			}
			
			return array_keys($va_types);
		}
		# -------------------------------------------------------
		public function isValidType($ps_type) {
			return ($ps_type) && in_array($ps_type, $this->getTypes());
		}
		# -------------------------------------------------------
		# Elements
		# -------------------------------------------------------
		private function getElements() {
			if (($vs_format = $this->getFormat()) && ($vs_type = $this->getType())) {
				return $this->opa_formats[$vs_format][$vs_type]['elements'];
			}
			return null;
		}
		# -------------------------------------------------------
		private function getElementInfo($ps_element_name) {
			if (($vs_format = $this->getFormat()) && ($vs_type = $this->getType())) {
				return $this->opa_formats[$vs_format][$vs_type]['elements'][$ps_element_name];
			}
			return null;
		}
		# -------------------------------------------------------
		public function validateValue($ps_value) {
			if (!$ps_value) { return array(); }
			$vs_separator = $this->getSeparator();
			$va_elements = $this->getElements();
			
			if ($vs_separator) {
				$va_element_vals = explode($vs_separator, $ps_value);
			} else {
				$va_element_vals = array($ps_value);
			}
			
			$vn_i = 0;
			
			$va_element_errors = array();
			foreach($va_elements as $vs_element_name => $va_element_info) {
				$vs_value = $va_element_vals[$vn_i];
				$vn_value_len = unicode_strlen($vs_value);
				
				switch($va_element_info['type']) {
					case 'LIST':
						if (!in_array($vs_value, $va_element_info['values'])) { 
							$va_element_errors[$vs_element_name] = "'".$vs_value."' is not valid for ".$va_element_info['description'];
						}
						break;
					case 'SERIAL':
						if ($vs_value) {
							if (!preg_match("/^[A-Za-z0-9]+$/", $vs_value)) { 
								$va_element_errors[$vs_element_name] = "'".$vs_value."' is not valid for ".$va_element_info['description']."; only letters and numbers are allowed";
							}
						}
						break;
					case 'CONSTANT':
						if ($vs_value != $va_element_info['value']) { 
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must be set to ".$va_element_info['value'];
						}
						break;
					case 'FREE':
						# noop
						if (!$vs_value) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be blank";
						}
						if (isset($va_element_info['minimum_length']) && ($vn_value_len < $va_element_info['minimum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be shorter than ".$va_element_info['minimum_length']." characters";
						}
						if (isset($va_element_info['maximum_length']) && ($vn_value_len > $va_element_info['maximum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be longer than ".$va_element_info['maximum_length']." characters";
						}
						break;
					case 'NUMERIC':
						if (!preg_match("/^[\d]+[a-zA-Z]{0,1}$/", $vs_value)) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must be a number";
						}
						if (isset($va_element_info['minimum_value']) && ($vs_value < $va_element_info['minimum_value'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be less than ".$va_element_info['minimum_value'];
						}
						if (isset($va_element_info['maximum_value']) && ($vs_value > $va_element_info['maximum_value'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be more than ".$va_element_info['maximum_value'];
						}
						if (isset($va_element_info['minimum_length']) && ($vn_value_len < $va_element_info['minimum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be shorter than ".$va_element_info['minimum_length']." characters";
						}
						if (isset($va_element_info['maximum_length']) && ($vn_value_len > $va_element_info['maximum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be longer than ".$va_element_info['maximum_length']." characters";
						}
						break;
					case 'ALPHANUMERIC':
						if ($vs_value != '' && !preg_match("/^[A-Za-z0-9]+$/", $vs_value)) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must consist only letters and numbers";
						}
						if (isset($va_element_info['minimum_length']) && ($vn_value_len < $va_element_info['minimum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be shorter than ".$va_element_info['minimum_length']." characters";
						}
						if (isset($va_element_info['maximum_length']) && ($vn_value_len > $va_element_info['maximum_length'])) {
							$va_element_errors[$vs_element_name] = $va_element_info['description']." must not be longer than ".$va_element_info['maximum_length']." characters";
						}
						break;
					case 'YEAR':
						$va_tmp = getdate();
						if ($vs_value != '') {
							if ((($vs_value < 1800) || ($vs_value > ($va_tmp['year'] + 10))) || ($vs_value != intval($vs_value))) { 
								$va_element_errors[$vs_element_name] = $va_element_info['description']." must be a valid year";
							}
						}
						break;
					case 'MONTH':
						if ($vs_value != '') {
							if ((($vs_value < 1) || ($vs_value > 12)) || ($vs_value != intval($vs_value))) { 
								$va_element_errors[$vs_element_name] = $va_element_info['description']." must be a valid numeric month (between 1 and 12)";
							}
						}
						break;
					case 'DAY':
						if ($vs_value != '') {
							if ((($vs_value < 1) || ($vs_value > 31)) || ($vs_value != intval($vs_value))) { 
								$va_element_errors[$vs_element_name] = $va_element_info['description']." must be a valid numeric day (between 1 and 31)";
							}
						}
						break;
					default:
						# noop
						break;
						
				}
				$vn_i++;
			}
			return $va_element_errors;
		}
		# -------------------------------------------------------
		public function isValidValue($ps_value=null) {
			return $this->validateValue($ps_value ? $ps_value : $this->getValue());
		}
		# -------------------------------------------------------
		protected function getNextValue($ps_element_name,$ps_value=null, $pb_dont_mark_value_as_used=false) {
			if (!$ps_value) { $ps_value = $this->getValue(); }
			$va_element_info = $this->getElementInfo($ps_element_name);
			
			$vs_table = $va_element_info['table'];
			$vs_field = $va_element_info['field'];
			$vs_sort_field = $va_element_info['sort_field'];
			
			if (!$vs_table) { return 'ERR';}
			if (!$vs_field) { return 'ERR';}
			if (!$vs_sort_field) { $vs_sort_field = $vs_field; }
			
			$vs_separator = $this->getSeparator();
			$va_elements = $this->getElements();
			
			if ($ps_value == null) {
				foreach($va_elements as $vs_element_name => $va_element_info) {
					switch($va_element_info['type']) {
						case 'CONSTANT':
							$va_element_vals[] = $va_element_info['value'];
							break;
						case 'YEAR':
						case 'MONTH':
						case 'DAY':
							$va_date = getDate();
							if ($va_element_info['type'] == 'YEAR') { $va_element_vals[] = $va_date['year']; }
							if ($va_element_info['type'] == 'MONTH') { $va_element_vals[]  = $va_date['mon']; }
							if ($va_element_info['type'] == 'DAY') { $va_element_vals[]  = $va_date['mday']; }
							break;
						case 'LIST':
							if ($va_element_info['default']) {
								$va_element_vals[] = $va_element_info['default'];
							} else {
								if (is_array($va_element_info['values'])) {
									$va_element_vals[] = array_shift($va_element_info['values']);
								}
							}
							break;
						default:
							$va_element_vals[] = '';
							break;
					}
				}
			} else {
				$va_element_vals = $vs_separator ? explode($vs_separator, $ps_value) : array($ps_value);
			}
			
			$va_tmp = array();
			$vn_i = 0;
			foreach($va_elements as $vs_element_name => $va_element_info) {
				if ($vs_element_name == $ps_element_name) { break; }
				$va_tmp[] = array_shift($va_element_vals);
				$vn_i++;
			}
			
			$vs_stub = trim(join($vs_separator, $va_tmp));
			
			
			$this->opo_db->dieOnError(false);
			
			// Get the next number based upon field data
			if ($qr_res = $this->opo_db->query("
				SELECT $vs_field FROM ".$vs_table."
				WHERE
					$vs_field LIKE ?
				ORDER BY 
					$vs_sort_field DESC
			", $vs_stub.(($vs_stub != '') ? $vs_separator.'%' : '%'))) {
				if ($this->opo_db->numErrors()) {
					return "ERR";
				}
				
				// Figure out what the sequence (last) number in the multipart number taken from the field is...
				if ($qr_res->numRows()) {
					while($qr_res->nextRow()) {
						$va_tmp = $vs_separator ? explode($vs_separator, $qr_res->get($vs_field)) : array($qr_res->get($vs_field));
							
						if(is_numeric($va_tmp[$vn_i])) {
							$vn_num = intval($va_tmp[$vn_i]) + 1;
							break;
						}
					}
					if ($vn_num == '') { $vn_num = 1; }
					if (is_array($va_tmp)) {
						array_pop($va_tmp);
						$vs_stub = join($vs_separator, $va_tmp);
					} else {
						$vs_stub = '';
					}
				} else {
					$vn_num = 1;
				}
				
				// Now get the last used sequence number for this "stub"
				$vn_max_num = $this->getSequenceMaxValue($this->getFormat(), $ps_element_name, $vs_stub);
				
				// Make the new number one more than the last used number if it is less than the last 
				// (this prevents numbers from being reused when records are deleted or renumbered)
				if ($vn_num <= $vn_max_num) {
					$vn_num = $vn_max_num + 1;
				}
				
				// Record this newly issued number as the new "last used" number, unless told not to do so
				if (!$pb_dont_mark_value_as_used) {
					$this->setSequenceMaxValue($this->getFormat(), $ps_element_name, $vs_stub, $vn_num);
				}
				return $vn_num;
			} else {
				return 'ERR'; //.join('; ',$this->opo_db->getErrors()).']';
			}
		}
		# -------------------------------------------------------
		/**
		 * Returns sortable value padding according to the format of the specified format and type
		 */
		public function getSortableValue($ps_value=null) {
			$vs_separator = $this->getSeparator();
			$va_elements = $this->getElements();
			$va_element_vals = explode($vs_separator, $ps_value ? $ps_value : $this->getValue());
		
			$va_output = array();
			for($vn_i=0; $vn_i < sizeof($va_element_vals); $vn_i++) {
				list($vs_element_name, $va_element_info) = each($va_elements);
				$vn_padding = 20;
				
				switch($va_element_info['type']) {
					case 'LIST':
						$vn_w = $vn_padding - unicode_strlen($va_element_vals[$vn_i]);
						if ($vn_w < 0) { $vn_w = 0; }
						$va_output[] = str_repeat(' ', $vn_w).$va_element_vals[$vn_i];
						break;
					case 'CONSTANT':
						$vn_len = unicode_strlen($va_element_info['value']);
						if ($vn_padding < $vn_len) { $vn_padding = $vn_len; }
						$va_output[] = str_repeat(' ', $vn_padding - unicode_strlen($va_element_vals[$vn_i])).$va_element_vals[$vn_i];
						break;
					case 'FREE':
					case 'ALPHANUMERIC':
						if ($vn_padding < $va_element_info['width']) { $vn_padding = $va_element_info['width']; }
						$vn_pad_len = $vn_padding - unicode_strlen($va_element_vals[$vn_i]);
						if ($vn_pad_len < 0) { $vn_pad_len = 0; }
						$va_output[] = str_repeat(' ', $vn_pad_len).$va_element_vals[$vn_i];
						break;
					case 'SERIAL':
					case 'NUMERIC':
						if ($vn_padding < $va_element_info['width']) { $vn_padding = $va_element_info['width']; }
						if (preg_match("/^([0-9]+)([A-Za-z]{1})$/", $va_element_vals[$vn_i], $va_matches)) {
							$va_output[] = str_repeat(' ', $vn_padding - unicode_strlen(intval($va_matches[1]))).intval($va_matches[1]).$va_matches[2];
						} else {
							$va_output[] = str_repeat(' ', $vn_padding - unicode_strlen(intval($va_element_vals[$vn_i]))).intval($va_element_vals[$vn_i]);
						}
						break;
					case 'YEAR':
						$vn_p = 4 - unicode_strlen($va_element_vals[$vn_i]);
						if ($vn_p < 0) { $vn_p = 0; }
						$va_output[] = str_repeat(' ', $vn_p).$va_element_vals[$vn_i];
						break;
					case 'MONTH':
					case 'DAY':
						$vn_p = 2 - unicode_strlen($va_element_vals[$vn_i]);
						if ($vn_p < 0) { $vn_p = 0; }
						$va_output[] = str_repeat(' ', 2 - $vn_p).$va_element_vals[$vn_i];
						break;
					default:
						$va_output[] = str_repeat(' ', $vn_padding - unicode_strlen($va_element_vals[$vn_i])).$va_element_vals[$vn_i];
						break;
						
				}
			}
			
			return join($vs_separator, $va_output);
		}
		# -------------------------------------------------------
		# User interace (HTML)
		# -------------------------------------------------------
		public function htmlFormElement($ps_name, &$pa_errors=null, $pa_options=null) {
			if (!is_array($pa_options)) { $pa_options = array(); }
			$vs_id_prefix = isset($pa_options['id_prefix']) ? $pa_options['id_prefix'] : null;
			$vb_generate_for_search_form = isset($pa_options['for_search_form']) ? true : false;
			
			$pa_errors = $this->validateValue($this->getValue());
			
			$vs_separator = $this->getSeparator();
			
			if ($vs_separator) {
				$va_element_vals = explode($vs_separator, $this->getValue());
			} else {
				$va_element_vals = array($this->getValue());
			}
			
			if (!is_array($va_elements = $this->getElements())) { $va_elements = array(); }
			
			$va_element_controls = array();
			$va_element_control_names = array();
			$vn_i=0;
			
			$vb_next_in_seq_is_present = false;
			foreach($va_elements as $vs_element_name => $va_element_info) {
				if (($va_element_info['type'] == 'SERIAL') && ($va_element_vals[$vn_i] == '')) {
					$vb_next_in_seq_is_present = true;
				}
				$vs_tmp = $this->genNumberElement($vs_element_name, $ps_name, $va_element_vals[$vn_i], $vs_id_prefix, $vb_generate_for_search_form);
				$va_element_control_names[] = $ps_name.'_'.$vs_element_name;
		
				if (($pa_options['show_errors']) && (isset($pa_errors[$vs_element_name]))) {
					if ($pa_options['error_icon']) {
						$vs_error_message = preg_replace("/[\"\']+/", "", $pa_errors[$vs_element_name]);
						$vs_tmp .= "<a href='#'\"><img src='".$pa_options['error_icon']."' border='0'/></a>";
					} 
				}
				$va_element_controls[] = $vs_tmp;
				$vn_i++;
			}
			$va_element_error_display = array();
			if (sizeof($va_elements) < sizeof($va_element_vals)) {
				$vs_extra_vals = join($vs_separator, array_slice($va_element_vals, sizeof($va_elements)));
				$va_element_controls[] = "<input type='text' name='".$ps_name."_extra' value='".htmlspecialchars($vs_extra_vals, ENT_QUOTES, 'UTF-8')."' size='10'>";
				$va_element_control_names[] = $ps_name.'_extra';
			}
			
			$vs_js = '';
			if (($pa_options['check_for_dupes']) && !$vb_next_in_seq_is_present){
				$va_ids = array();
				foreach($va_element_control_names as $vs_element_control_name) {
					$va_ids[] = "'#".$vs_id_prefix.$vs_element_control_name."'";
				}
				
				$vs_js = '<script type="text/javascript" language="javascript">'."\n// <![CDATA[\n";
				$va_lookup_url_info = caJSONLookupServiceUrl($pa_options['request'], $pa_options['table']);
				$vs_js .= "
					caUI.initIDNoChecker({
						errorIcon: '".$pa_options['error_icon']."',
						processIndicator: '".$pa_options['progress_indicator']."',
						idnoStatusID: 'idnoStatus',
						lookupUrl: '".$va_lookup_url_info['idno']."',
						idnoFormElementIDs: [".join(',', $va_ids)."],
						separator: '".$this->getSeparator()."',
						row_id: ".intval($pa_options['row_id']).",
						context_id: ".intval($pa_options['context_id']).",
						
						singularAlreadyInUseMessage: '".addslashes(_t('Identifier is already in use'))."',
						pluralAlreadyInUseMessage: '".addslashes(_t('Identifier is already in use %1 times'))."'
					});
				";
				
				$vs_js .= "// ]]>\n</script>\n";	
			}
			
			return join($vs_separator, $va_element_controls).$vs_js;
		}
		# -------------------------------------------------------
		public function htmlFormValue($ps_name, $vs_value=null, $pb_dont_mark_serial_value_as_used=false, $pb_generate_for_search_form=false, $pb_always_generate_serial_values=false) {
			$va_tmp = $this->htmlFormValuesAsArray($ps_name, $vs_value, $pb_dont_mark_serial_value_as_used, $pb_generate_for_search_form, $pb_always_generate_serial_values);
			if (!($vs_separator = $this->getSeparator())) { $vs_separator = ''; }
			
			return (is_array($va_tmp)) ? join($vs_separator, $va_tmp) : null;	
		}
		# -------------------------------------------------------
		public function htmlFormValuesAsArray($ps_name, $vs_value=null, $pb_dont_mark_serial_value_as_used=false, $pb_generate_for_search_form=false, $pb_always_generate_serial_values=false) {
			if (is_null($vs_value)) {
				if(isset($_REQUEST[$ps_name]) && $_REQUEST[$ps_name]) { return $_REQUEST[$ps_name]; }
			}
			if (!is_array($va_element_list = $this->getElements())) { return null; }
			
			$va_element_names = array_keys($va_element_list);
			$vs_separator = $this->getSeparator();
			$va_element_values = array();
			if ($vs_value) {
				if ($vs_separator) {
					$va_tmp = explode($vs_separator, $vs_value);
				} else {
					$va_tmp = array($vs_value);
				}
				foreach($va_element_names as $vs_element_name) {
					if (!sizeof($va_tmp)) { break; }
					$va_element_values[$ps_name.'_'.$vs_element_name] = array_shift($va_tmp);
				}
			} else {
				foreach($va_element_names as $vs_element_name) {
					if(isset($_REQUEST[$ps_name.'_'.$vs_element_name])) {
						$va_element_values[$ps_name.'_'.$vs_element_name] = $_REQUEST[$ps_name.'_'.$vs_element_name];
					}
				}
			}
			
			$vb_isset = false;
			$vb_is_not_empty = false;
			$va_tmp = array();
			$va_elements = $this->getElements();
			foreach($va_elements as $vs_element_name => $va_element_info) {
				if ($va_element_info['type'] == 'SERIAL') {
					if ($pb_generate_for_search_form) { 
						$va_tmp[$vs_element_name] = $va_element_values[$ps_name.'_'.$vs_element_name]; 
						continue;
					}
					
					if (($va_element_values[$ps_name.'_'.$vs_element_name] == '') || $pb_always_generate_serial_values) {
						$va_tmp[$vs_element_name] = $this->getNextValue($vs_element_name, join($vs_separator, $va_tmp), $pb_dont_mark_serial_value_as_used);
						$vb_isset = $vb_is_not_empty = true;
						continue;
					} else {
						if (!$pb_dont_mark_serial_value_as_used && (intval($va_element_values[$ps_name.'_'.$vs_element_name]) > $this->getSequenceMaxValue($ps_name, $vs_element_name, ps_element_name))) {
							$this->setSequenceMaxValue($this->getFormat(), $vs_element_name, join($vs_separator, $va_tmp), $va_element_values[$ps_name.'_'.$vs_element_name]);
						}
					}
				} 
				
				if ($pb_generate_for_search_form) {
					if ($va_element_values[$ps_name.'_'.$vs_element_name] == '') {
						$va_tmp[$vs_element_name] = '';
						break;
					}
				}
				$va_tmp[$vs_element_name] = $va_element_values[$ps_name.'_'.$vs_element_name];
				
				if (isset($va_element_values[$ps_name.'_'.$vs_element_name])) {
					$vb_isset = true;
				}
				if ($va_element_values[$ps_name.'_'.$vs_element_name] != '') {
					$vb_is_not_empty = true;
				}
			}
			if (isset($va_element_values[$ps_name.'_extra']) && ($vs_tmp = $va_element_values[$ps_name.'_extra'])) {
				$va_tmp[$ps_name.'_extra'] = $vs_tmp;
			}
			
			return ($vb_isset && $vb_is_not_empty) ? $va_tmp : null;
		}
		# -------------------------------------------------------
		# Generated id number element
		# -------------------------------------------------------
		private function genNumberElement($ps_element_name, $ps_name, $ps_value, $ps_id_prefix=null, $pb_generate_for_search_form=false) {
			if (!($vs_format = $this->getFormat())) {
				return null;
			}
			if (!($vs_type = $this->getType())) {
				return null;
			}
			$vs_element = '';
			
			$va_element_info = $this->opa_formats[$vs_format][$vs_type]['elements'][$ps_element_name];
			$vs_element_form_name = $ps_name.'_'.$ps_element_name;
			
			$vs_element_value = $ps_value;
			switch($va_element_info['type']) {
				# ----------------------------------------------------
				case 'LIST':
					if (!$vs_element_value || $va_element_info['editable'] || $pb_generate_for_search_form) {
						if (!$vs_element_value && !$pb_generate_for_search_form) { $vs_element_value = $va_element_info['default']; }
						$vs_element = '<select name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'">';
						if ($pb_generate_for_search_form) {
							$vs_element .= "<option value='' SELECTED='1'>-</option>";
						}
						foreach($va_element_info['values'] as $vs_value) {
							if ($vs_value == $vs_element_value) { $SELECTED = 'SELECTED="1"'; } else { $SELECTED = ''; }
							$vs_element .= '<option '.$SELECTED.'>'.$vs_value.'</option>';
						}
						
						if (!$pb_generate_for_search_form) {
							if (!in_array($vs_element_value, $va_element_info['values'])) {
								$vs_element .= '<option SELECTED="1">'.$vs_element_value.'</option>';
							}
						}
						
						$vs_element .= '</select>';
					} else {
						$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'"/>'.$vs_element_value;
					}
					
					break;
				# ----------------------------------------------------
				case 'SERIAL':
					if (($vn_width = $va_element_info['width']) <= 0) { $vn_width = 3; }
					
					if ($pb_generate_for_search_form) {
						$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="" maxlength="'.$vn_width.'" size="'.$vn_width.'"/>';
					} else {
						if ($vs_element_value == '') {
							$vs_next_num = $this->getNextValue($ps_element_name, null, true);
							$vs_element .= '&lt;'._t('Will be assigned %1 when saved', $vs_next_num).'&gt;';
						} else {
							if ($va_element_info['editable']) {
								$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'" size="'.$vn_width.'" maxlength="'.$vn_width.'"/>';
							} else {
								$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'"/>'.$vs_element_value;
							}
						}
					}
					break;
				# ----------------------------------------------------
				case 'CONSTANT':
					if (($vn_width = $va_element_info['width']) <= 0) { $vn_width = 3; }
					
					if (!$vs_element_value) { $vs_element_value = $va_element_info['value']; }
					if ($va_element_info['editable'] || $pb_generate_for_search_form) {
						$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'" size="'.$vn_width.'"/>';
					} else {
						$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'"/>'.$vs_element_value;
					}
					break; 
				# ----------------------------------------------------
				case 'FREE':
				case 'NUMERIC':
				case 'ALPHANUMERIC':
					if (($vn_width = $va_element_info['width']) <= 0) { $vn_width = 3; }
					if (!$vs_element_value || $va_element_info['editable'] || $pb_generate_for_search_form) {
						$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'" size="'.$vn_width.'" maxlength="'.$vn_width.'"/>';
					} else {
						$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'"/>'.$vs_element_value;
					}
					break;
				# ----------------------------------------------------
				case 'YEAR':
				case 'MONTH':
				case 'DAY':
					if (($vn_width = $va_element_info['width']) <= 0) { $vn_width = 5; }
					$va_date = getdate();
					if ($vs_element_value == '') {
						$vn_value = '';
						if (!$pb_generate_for_search_form) {
							if ($va_element_info['type'] == 'YEAR') { $vn_value = $va_date['year']; }
							if ($va_element_info['type'] == 'MONTH') { $vn_value = $va_date['mon']; }
							if ($va_element_info['type'] == 'DAY') { $vn_value = $va_date['mday']; }
						}
						
						if ($va_element_info['editable'] || $pb_generate_for_search_form) {
							$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vn_value, ENT_QUOTES, 'UTF-8').'" size="'.$vn_width.'"/>';
						} else {
							$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vn_value, ENT_QUOTES, 'UTF-8').'"/>'.$vn_value;
						}
					} else {
						if ($va_element_info['editable'] || $pb_generate_for_search_form) {
							$vs_element .= '<input type="text" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'" size="'.$vn_width.'"/>';
						} else {
							$vs_element .= '<input type="hidden" name="'.$vs_element_form_name.'" id="'.$ps_id_prefix.$vs_element_form_name.'" value="'.htmlspecialchars($vs_element_value, ENT_QUOTES, 'UTF-8').'"/>'.$vs_element_value;
						}
					}
				
					break;
				# ----------------------------------------------------
				default:
					return '[Invalid element type]';
					break;
				# ----------------------------------------------------
			}
			return $vs_element;
		}
		# -------------------------------------------------------
		public function getSequenceMaxValue($ps_format, $ps_element, $ps_idno_stub) {
			$this->opo_db->dieOnError(false);
			if (!($qr_res = $this->opo_db->query("
				SELECT seq
				FROM ca_multipart_idno_sequences
				WHERE
					(format = ?) AND (element = ?) AND (idno_stub = ?)
			", $ps_format, $ps_element, $ps_idno_stub))) {
				return null;
			}
			if (!$qr_res->nextRow()) { return 0; }
			return $qr_res->get('seq');
		}
		# -------------------------------------------------------
		public function setSequenceMaxValue($ps_format, $ps_element, $ps_idno_stub, $pn_value) {
			$this->opo_db->dieOnError(false);
			$this->opo_db->query("
				DELETE FROM ca_multipart_idno_sequences 
				WHERE format = ? AND element = ? AND idno_stub = ?
			", $ps_format, $ps_element, $ps_idno_stub);
			
			if (!($qr_res = $this->opo_db->query("
				INSERT INTO ca_multipart_idno_sequences
				(format, element, idno_stub, seq)
				VALUES
				(?, ?, ?, ?)
			", $ps_format, $ps_element, $ps_idno_stub, $pn_value))) {
				return null;
			}
			
			return $qr_res;
		}
		# -------------------------------------------------------
		public function setDb($po_db) {
			$this->opo_db = $po_db;
		}
		# -------------------------------------------------------
	}
?>