# *** use ONLY lowercase letters in lists: input will be forced to lowercase for comparison ***

# List month names; used whenever name of month needs to be displayed
monthList = [janvier, février, mars, avril, mai, juin, juillet, août, septembre, octobre, novembre, décembre]

# *** the following list of months is for display and *SHOULD* be capitalized where appropriate
monthListDisplay = [janvier, février, mars, avril, mai, juin, juillet, août, septembre, octobre, novembre, décembre]

# Hash table mapping acceptable month names to the display names defined in 'monthList'
# http://fr.wikipedia.org/wiki/Mois
# code à trois caratères et abreviations courantes
monthTable = {
	jan = janvier, janv. = janvier,
	fev = février, fev. = février, fév = février, févr. = février,
	mar = mars, mars = mars,
	avr = avril, avr. = avril,
	mai = mai,
	jun = juin, juin = juin
	jul = juillet, juil = juillet, juil. = juillet, juill. = juillet,
	aoû = août, 
	sep = septembre, sept. = septembre,
	oct = octobre, oct. = octobre,
	nov = novembre, nov. = novembre,
	dec = decembre, dec. = decembre, déc = décembre, déc. = décembre
}

# List of day names, starting with Sunday
dayListDisplay = [dimanche, lundi, mardi, mercredi, jeudi, vendredi, samedi]

#rangePreConjunctions = [from, between]
rangePreConjunctions = [de, entre]

#rangeConjunctions = [to, -, and, .., through]
rangeConjunctions = [jusqu'à, -, et, .., comprenant]

dateTimeConjunctions = [à,@]

dateDelimiters = [/,-,.]
timeDelimiters = [:,.]

timeAMMeridian = am
timePMMeridian = pm

meridianTable = {
	a.m. = am,
	p.m. = pm
}

# ???
dateCircaIndicator = [environ, env., env]
dateUncertaintyIndicator = [~]
#dateUncertaintyYearIndicator = [y]
dateUncertaintyYearIndicator = [année ?]
#dateUncertaintyDayIndicator = [d]
dateUncertaintyDayIndicator = [jour ?]

# What to use to indicate a geological date ("millions of years ago")
# Modèle : http://fr.wikipedia.org/wiki/Extinction_Cr%C3%A9tac%C3%A9-Tertiaire
dateMYA = [Ma]

dateADIndicator = ap. J.-C.
dateBCIndicator = av. J.-C.
ADBCTable = {
	a.d. = ap. J.-C.,
	b.c. = av. J.-C.
}

#nowDate = [now]
nowDate = [maintenant]
#todayDate = [today]
todayDate = [aujourd'hui]
#yesterdayDate = [yesterday]
yesterdayDate = [hier]
#tomorrowDate = [tomorrow]
tomorrowDate = [demain]

#presentDate = [present, ?, ??, ???, ????]
presentDate = [présent, ?, ??, ???, ????]
#beforeQualifier = [before]
beforeQualifier = [avant]
#diedQualifier = [d., d, died]
diedQualifier = [m., m, mort]
#afterQualifier = [after]
afterQualifier = [après]
#bornQualifier = [b., b, born]
# ??? "né le", "née le"  
bornQualifier = [n., n, né(e)]

# Text to indicate century (as in "20th century")
centuryIndicator = [siècle]

# Text to indicate decdae (as in "1920s")
decadeIndicator = [s]

# list of numeric suffixes, starting with the one for zero
# (eg. 0th, 1st, 2nd, 3rd would be a list like so: [th, st, nd, rd])
#ordinalSuffixes = [th, st, nd, rd]
ordinalSuffixes = [, er, e, e]
#ordinalSuffixDefault = th
ordinalSuffixDefault = e

# in delimited dates (ex. 12/10/2009) is the first number a month or a day?
# set to "0" for European style dates (day comes first); "1" for American-style dates (month comes first)
#monthComesFirstInDelimitedDate = 1
monthComesFirstInDelimitedDate = 0

# character(s) to append to day in full (not delimited) date
# eg. in the date "1. February 2009", "." is the daySuffix
# Note: you can put arbitrary text here - only punctuation
daySuffix = 

# Definite articles
#definiteArticles = [the]
definiteArticles = [le]

# Indefinite articles
#indefiniteArticles = [a, an]
indefiniteArticles = [un, une]

